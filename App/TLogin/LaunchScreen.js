import React, { Component } from 'react'
import { 
    ScrollView, 
    Text, 
    Image, 
    View, 
    Button, 
    StyleSheet,
    TouchableOpacity
  } from 'react-native'
  
import Login from './LoginScreen/LoginForm'
import Register from './LoginScreen/Register'
import Dashboard from './Dashboard/Dashboard'
import FaCheck from './Dashboard/FaCheck'
import DetialFaCheck from './Dashboard/DetialFaCheck'
import Negotation from './Dashboard/Negotation'
import MonitorMaps from './Dashboard/MonitorMaps'
import NotificationController from './NotificationController';
import PushNotification from 'react-native-push-notification';

import { createStackNavigator, createAppContainer } from 'react-navigation';
import { Images } from '../Themes'

// Styles
import styles from './Styles/LaunchScreenStyles'

class LaunchScreen extends Component {

  constructor(){
    super();
    this.state = {
      isLoggedIn: false,
      user: {}
   };
  }

  componentWillMount = () => {

    // let push = PushNotification.localNotification({
    //   /* Android Only Properties */
    //   id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    //   ticker: "My Notification Ticker", // (optional)
    //   autoCancel: true, // (optional) default: true
    //   largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
    //   smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
    //   bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
    //   subText: "This is a subText", // (optional) default: none
    //   color: "red", // (optional) default: system default
    //   vibrate: true, // (optional) default: true
    //   vibration: 10000, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    //   tag: 'some_tag', // (optional) add tag to message
    //   group: "group", // (optional) add group to message
    //   ongoing: false, // (optional) set whether this is an "ongoing" notification
    //   priority: "high", // (optional) set notification priority, default: high
    //   visibility: "private", // (optional) set notification visibility, default: private
    //   importance: "high", // (optional) set notification importance, default: high
   
    //   /* iOS only properties */
    //   alertAction: null,// (optional) default: view
    //   category: null, // (optional) default: null
    //   userInfo: null,// (optional) default: null (object containing additional notification data)
   
    //   /* iOS and Android properties */
    //   title: "My Notification Title", // (optional)
    //   message: "My Notification Message", // (required)
    //   playSound: false, // (optional) default: true
    //   soundName: 'default',
    //   number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    //   repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    //   actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    // });

    // PushNotification.cancelLocalNotifications({id: '0'});

    PushNotification.localNotificationSchedule({
      //... You can use all the options from localNotifications
      message: "This is nofitication",
      date: new Date(Date.now() + (5 * 1000))
    });
  }

  render () {
    return (
      <View style={styles.mainContainer}>
        <Image source={Images.background} style={styles.backgroundImage} resizeMode='stretch' />
        <ScrollView style={styles.container}>
          
          <View style={styles.section} >
            {/* <Image source={Images.ready} /> */}
            <Text style={styles.sectionText} >
              Жорлонгоо
            </Text>
            <Text style={styles.sectionTextTwo}>
              өөрчилье
            </Text>
          </View>

          <View style={styles.centered}>
            <Image source={Images.launch} style={styles.logo} />
          </View>

          {/* <View style={styles.buttonGroup} >
            <Button title="Нэвтрэх" color="#841584" onPress={ () => this.props.navigation.navigate('Dashboard') } />
            <Button title="Бүртгүүлэх" onPress={ () => this.props.navigation.navigate('Register') } />
          </View> */}

          <TouchableOpacity style={styles.button} onPress={ () => this.props.navigation.navigate('Dashboard') }>
            <Text style={styles.buttonText} > Нэвтрэх </Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={ () => this.props.navigation.navigate('Register') } style={styles.button}>
            <Text style={styles.buttonText}> Бүртгүүлэх </Text>
          </TouchableOpacity>
          
        </ScrollView>
        <NotificationController />
      </View>
    )
  }
}

// const RootStack = 

// const AppContainer = createAppContainer(RootStack);

export default createStackNavigator(
  {
    Home: {
      screen: LaunchScreen,
      navigationOptions: ({navigation}) => ({
        header: null,
      }),
    },
    Dashboard: {
      screen: Dashboard,
      navigationOptions: {
        title: 'Customer Name, profiles edit, logout',
        headerLeft: null,
        gesturesEnabled: false,
      },
    },
    FaCheck: {
      screen: FaCheck,
    },
    DetialFaCheck: {
      screen: DetialFaCheck,
    },
    Negotation: {
      screen: Negotation,
      navigationOptions: {
        title: 'Customer Name, profiles edit, logout',
        headerLeft: null,
        gesturesEnabled: false,
      },
    },
    MonitorMaps: {
      screen: MonitorMaps,
      navigationOptions: {
        title: 'Gogole maps',
        gesturesEnabled: false,
      },
    },
    Login: {
      screen: Login
    },
    Register: {
      screen: Register,
    },
  }
);

