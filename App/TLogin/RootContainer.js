import React, { Component } from 'react'
import { View, StatusBar } from 'react-native'
import ReduxNavigation from '../Navigation/ReduxNavigation'
import { connect } from 'react-redux'
import StartupActions from '../Redux/StartupRedux'
import ReduxPersist from '../Config/ReduxPersist'
import NotificationController from './NotificationController'
import PushNotification from 'react-native-push-notification';

// Styles
import styles from './Styles/RootContainerStyles'

class RootContainer extends Component {
  componentDidMount () {
    // if redux persist is not active fire startup action
    if (!ReduxPersist.active) {
      this.props.startup()
    }

    // let push = PushNotification.localNotification({
    //   /* Android Only Properties */
    //   id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    //   ticker: "My Notification Ticker", // (optional)
    //   autoCancel: true, // (optional) default: true
    //   largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
    //   smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
    //   bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
    //   subText: "This is a subText", // (optional) default: none
    //   color: "red", // (optional) default: system default
    //   vibrate: true, // (optional) default: true
    //   vibration: 10000, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    //   tag: 'some_tag', // (optional) add tag to message
    //   group: "group", // (optional) add group to message
    //   ongoing: false, // (optional) set whether this is an "ongoing" notification
    //   priority: "high", // (optional) set notification priority, default: high
    //   visibility: "private", // (optional) set notification visibility, default: private
    //   importance: "high", // (optional) set notification importance, default: high
   
    //   /* iOS only properties */
    //   alertAction: null,// (optional) default: view
    //   category: null, // (optional) default: null
    //   userInfo: null,// (optional) default: null (object containing additional notification data)
   
    //   /* iOS and Android properties */
    //   title: "My Notification Title", // (optional)
    //   message: "My Notification Message", // (required)
    //   playSound: false, // (optional) default: true
    //   soundName: 'default',
    //   number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    //   repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
    //   actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    // });

    // PushNotification.cancelLocalNotifications({id: '0'});

    // PushNotification.localNotificationSchedule({
    //   //... You can use all the options from localNotifications
    //   message: "push",
    //   date: new Date(Date.now() + (5 * 1000))
    // });

  }

  render () {
    return (
      <View style={styles.applicationView}>
        <StatusBar barStyle='light-content' />
        <ReduxNavigation />
      </View>
    )
  }
}

// wraps dispatch to create nicer functions to call within our component
const mapDispatchToProps = (dispatch) => ({
  startup: () => dispatch(StartupActions.startup())
})

export default connect(null, mapDispatchToProps)(RootContainer)
